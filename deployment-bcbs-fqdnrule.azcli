# Create Resource Group
rg=lab-bcbs
location=southcentralus
az group create -n $rg -l $location

#######################################################
############## Virtual Networks Setup #################
#######################################################
# Hub VNet
vnet_hub_name=bcbs-hub-vnet
vnet_hub_prefix=10.12.0.0/16
azfw_subnet_name=AzureFirewallSubnet
azfw_subnet_prefix=10.12.0.0/24
vm_hub_subnet_name=hub-subnet-vms
vm_hub_subnet_prefix=10.12.1.0/24
bastion_hub_subnet_name=AzureBastionSubnet
bastion_hub_subnet_prefix=10.12.2.0/24

# Spoke VNet
vnet_spoke_name=bcbs-spoke-vnet
vnet_spoke_prefix=10.13.0.0/16
aks_subnet_name=subnet-aks
aks_subnet_prefix=10.13.0.0/24
vm_spoke_subnet_name=spoke-subnet-vms
vm_spoke_subnet_prefix=10.13.1.0/24
acr_subnet_name=spoke-subnet-acr
acr_subnet_prefix=10.13.2.0/24

# Create vnet HUB
az network vnet create -g $rg -n $vnet_hub_name --address-prefix $vnet_hub_prefix -l $location
az network vnet subnet create -g $rg -n $azfw_subnet_name --vnet-name $vnet_hub_name --address-prefix $azfw_subnet_prefix
az network vnet subnet create -g $rg -n $vm_hub_subnet_name --vnet-name $vnet_hub_name --address-prefix $vm_hub_subnet_prefix
az network vnet subnet create -g $rg -n $bastion_hub_subnet_name --vnet-name $vnet_hub_name --address-prefix $bastion_hub_subnet_prefix

# Create Spoke vnet
az network vnet create -g $rg -n $vnet_spoke_name --address-prefix $vnet_spoke_prefix -l $location
az network vnet subnet create -g $rg -n $aks_subnet_name --vnet-name $vnet_spoke_name --address-prefix $aks_subnet_prefix
az network vnet subnet create -g $rg -n $vm_spoke_subnet_name --vnet-name $vnet_spoke_name --address-prefix $vm_spoke_subnet_prefix
az network vnet subnet create -g $rg -n $acr_subnet_name --vnet-name $vnet_spoke_name --address-prefix $acr_subnet_prefix --disable-private-endpoint-network-policies

# Create Peering
az network vnet peering create -g $rg -n $vnet_hub_name'To'$vnet_spoke_name --vnet-name $vnet_hub_name --remote-vnet $vnet_spoke_name --allow-vnet-access --allow-forwarded-traffic
az network vnet peering create -g $rg -n $vnet_spoke_name'To'$vnet_hub_name --vnet-name $vnet_spoke_name --remote-vnet $vnet_hub_name --allow-vnet-access --allow-forwarded-traffic

#######################################################
#################### Firewall Setup ###################
#######################################################

# Create firewall
azfw_name=azfw
azfw_pip=azfw-pip

az network public-ip create -g $rg -n $azfw_pip --sku standard --allocation-method static -l $location
azfw_ip=$(az network public-ip show -g $rg -n $azfw_pip --query ipAddress -o tsv)
az network firewall create -n $azfw_name -g $rg -l $location
azfw_id=$(az network firewall show -n $azfw_name -g $rg -o tsv --query id)
az network firewall ip-config create -f $azfw_name -n azfw-ipconfig -g $rg --public-ip-address $azfw_pip --vnet-name $vnet_hub_name
az network firewall update -n $azfw_name -g $rg
azfw_private_ip=$(az network firewall show -n $azfw_name -g $rg -o tsv --query 'ipConfigurations[0].privateIpAddress')

## Logging Firewall
logws_name=loglabbcbs
az monitor log-analytics workspace create -n $logws_name -g $rg
logws_id=$(az resource list -g $rg -n $logws_name --query '[].id' -o tsv)
logws_customerid=$(az monitor log-analytics workspace show -n $logws_name -g $rg --query customerId -o tsv)
az monitor diagnostic-settings create -n myfirewalldiag --resource $azfw_id --workspace $logws_id \
      --metrics '[{"category": "AllMetrics", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false }, "timeGrain": null}]' \
      --logs '[{"category": "AzureFirewallApplicationRule", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},{"category": "AzureFirewallNetworkRule", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}]'

command="az monitor diagnostic-settings create -n myfirewalldiag --resource $azfw_id --workspace $logws_id \
--metrics '[{"category": "AllMetrics", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false }, "timeGrain": null}]' \
--logs '[{"category": "AzureFirewallApplicationRule", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},{"category": "AzureFirewallNetworkRule", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}]'
"
echo $command
echo $command | clip


# Rules
# To add a rule to a existing collection just remove priority and Action from the command bellow
collection_vnettraffic_name=VnetTraffic
az network firewall network-rule create -f $azfw_name -g $rg -c $collection_vnettraffic_name \
    --protocols Any --destination-addresses $vnet_spoke_prefix $vnet_hub_prefix --destination-ports '*' --source-addresses $vnet_spoke_prefix $vnet_hub_prefix -n Allow-VNet-Communication --priority 210 --action Allow
az network firewall network-rule create -f $azfw_name -g $rg -c $collection_vnettraffic_name \
    --protocols Any --destination-addresses $vnet_hub_prefix --destination-ports '*' --source-addresses $vnet_hub_prefix -n Allow-All-HUB-Subnets
az network firewall network-rule create -f $azfw_name -g $rg -c $collection_vnettraffic_name \
    --protocols Any --destination-addresses $vnet_spoke_prefix --destination-ports '*' --source-addresses $vnet_spoke_prefix -n Allow-All-Spoke-Subnets
az network firewall network-rule create -f $azfw_name -g $rg -c $collection_vnettraffic_name \
    --protocols Any --destination-addresses $vnet_hub_prefix --destination-ports '*' --source-addresses $vnet_spoke_prefix -n Allow-Hub-to-Spoke
az network firewall network-rule create -f $azfw_name -g $rg -c $collection_vnettraffic_name \
    --protocols Any --destination-addresses $vnet_spoke_prefix --destination-ports '*' --source-addresses $vnet_hub_prefix -n Allow-Spoke-to-Hub

az network firewall network-rule create -f $azfw_name -g $rg -c WebTraffic \
    --protocols Tcp --destination-addresses $azfw_ip --destination-ports 80 8080 443 --source-addresses '*' -n AllowWeb --priority 300 --action Allow

# Application rule: AKS-egress (https://docs.microsoft.com/en-us/azure/aks/limit-egress-traffic):
collection_helpter_name=Helper-tools
target_fqdns="ifconfig.co api.snapcraft.io jsonip.com kubernaut.io motd.ubuntu.com"
az network firewall application-rule create -f $azfw_name -g $rg -c $collection_helpter_name \
    --protocols Http=80 Https=443 --target-fqdns $target_fqdns --source-addresses $vnet_hub_prefix $vnet_spoke_prefix -n Allow-ifconfig --priority 200 --action Allow

### AKS Network Rules ###
collection_AKS_name=AKS-egress
az network firewall network-rule create -f $azfw_name -g $rg -c $collection_AKS_name \
    --protocols Udp --destination-addresses '*' --destination-ports 123 --source-addresses $aks_subnet_prefix $vnet_hub_prefix $vnet_spoke_prefix -n NTP --priority 220 --action Allow
az network firewall network-rule create -f $azfw_name -g $rg -c $collection_AKS_name \
    --protocols Udp --destination-addresses '*' --destination-ports 1194 --source-addresses $aks_subnet_prefix $vnet_hub_prefix $vnet_spoke_prefix -n TunnelTraffic

# Creating rules takes a long time, hence it is better creating one with many FQDNs, than one per FQDN
collection_AKSApp_name=AKS-egress-application
# New Rule
rule_name="Egress"
az network firewall application-rule create -f $azfw_name -g $rg -c $collection_AKSApp_name -n $rule_name \
    --source-addresses '*' --protocols 'http=80' 'https=443' --fqdn-tags "AzureKubernetesService" --action allow --priority 100

## Stopped here

target_fqdns="*.azmk8s.io aksrepos.azurecr.io *.blob.core.windows.net mcr.microsoft.com *.cdn.mscr.io management.azure.com login.microsoftonline.com packages.azure.com acs-mirror.azureedge.net *.opinsights.azure.com *.monitoring.azure.com dc.services.visualstudio.com *.ods.opinsights.azure.com *.oms.opinsights.azure.com cloudflare.docker.com data.policy.core.windows.net store.policy.core.windows.net"
az network firewall application-rule create -f $azfw_name -g $rg -c $collection_AKSApp_name \
    --protocols Https=443 --target-fqdns $target_fqdns --source-addresses $aks_subnet_prefix -n $rule_name --priority 400 --action Allow

rule_name="Registries"
target_fqdns="$location.data.mcr.microsoft.com $acr_name.azurecr.io *.gcr.io gcr.io storage.googleapis.com *.docker.io quay.io *.quay.io *.cloudfront.net production.cloudflare.docker.com *.hcp.$location.cx.aks.containerservice.azure.us"
az network firewall application-rule create -f $azfw_name -g $rg -c $collection_AKSApp_name \
    --protocols Https=443 --target-fqdns $target_fqdns --source-addresses $aks_subnet_prefix -n $rule_name

# The next rules might be consolidated together (as the rules above) so that it takes shorter to configure them
rule_name="Additional-Usefull-Address"
target_fqdns="grafana.net grafana.com stats.grafana.org github.com raw.githubusercontent.com security.ubuntu.com security.ubuntu.com packages.microsoft.com azure.archive.ubuntu.com security.ubuntu.com hack32003.vault.azure.net *.letsencrypt.org usage.projectcalico.org gov-prod-policy-data.trafficmanager.net vortex.data.microsoft.com"
az network firewall application-rule create -f $azfw_name -g $rg -c $collection_AKSApp_name \
    --protocols Https=443 --target-fqdns $target_fqdns --source-addresses $aks_subnet_prefix -n $rule_name

## Didn't applied the above rules 

# VMs Rule to Allow everything for troubleshooting
collection_VMs_name=VMs-allow-all
az network firewall network-rule create -f $azfw_name -g $rg -c $collection_VMs_name \
    --protocols Any --destination-addresses '*' --destination-ports '*' --source-addresses $vm_hub_subnet_prefix $vm_spoke_subnet_prefix -n Allow-VM-Any --priority 150 --action Allow

#######################################################
############### Routing Table Setup ##################
#######################################################
# Route table
# AKS Subnet
aks_udr="$aks_subnet_name"-udr
az network route-table create -n $aks_udr -g $rg -l $location
az network route-table route create -n defaultRoute --route-table-name $aks_udr -g $rg \
    --next-hop-type VirtualAppliance --address-prefix "0.0.0.0/0" --next-hop-ip-address $azfw_private_ip
az network route-table route create -n $vnet_hub_name --route-table-name $aks_udr -g $rg \
    --next-hop-type VirtualAppliance --address-prefix $vnet_hub_prefix --next-hop-ip-address $azfw_private_ip
az network route-table route create -n $vm_spoke_subnet_name --route-table-name $aks_udr -g $rg \
    --next-hop-type VirtualAppliance --address-prefix $vm_spoke_subnet_prefix --next-hop-ip-address $azfw_private_ip
az network route-table route create -n $acr_subnet_name --route-table-name $aks_udr -g $rg \
    --next-hop-type VirtualAppliance --address-prefix $acr_subnet_prefix --next-hop-ip-address $azfw_private_ip    

aks_rt_id=$(az network route-table show -n $aks_udr -g $rg -o tsv --query id)
az network vnet subnet update -g $rg --vnet-name $vnet_spoke_name -n $aks_subnet_name --route-table $aks_rt_id
command="az network vnet subnet update -g $rg --vnet-name $vnet_spoke_name -n $aks_subnet_name --route-table $aks_rt_id"
echo $command | clip

# Spoke VM Subnet
vm_subnet_udr="$vm_spoke_subnet_name"-udr
az network route-table create -n $vm_subnet_udr -g $rg -l $location
az network route-table route create -n defaultRoute --route-table-name $vm_subnet_udr -g $rg \
    --next-hop-type VirtualAppliance --address-prefix "0.0.0.0/0" --next-hop-ip-address $azfw_private_ip
az network route-table route create -n $vm_hub_subnet_name --route-table-name $vm_subnet_udr -g $rg \
    --next-hop-type VirtualAppliance --address-prefix $vm_hub_subnet_prefix --next-hop-ip-address $azfw_private_ip
az network route-table route create -n $acr_subnet_name --route-table-name $vm_subnet_udr -g $rg \
    --next-hop-type VirtualAppliance --address-prefix $acr_subnet_prefix --next-hop-ip-address $azfw_private_ip
az network route-table route create -n $aks_subnet_name --route-table-name $vm_subnet_udr -g $rg \
    --next-hop-type VirtualAppliance --address-prefix $aks_subnet_prefix --next-hop-ip-address $azfw_private_ip    

vm_subnet_rt_id=$(az network route-table show -n $vm_subnet_udr -g $rg -o tsv --query id)
az network vnet subnet update -g $rg --vnet-name $vnet_spoke_name -n $vm_spoke_subnet_name --route-table $vm_subnet_rt_id
command="az network vnet subnet update -g $rg --vnet-name $vnet_spoke_name -n $vm_spoke_subnet_name --route-table $vm_subnet_rt_id"
echo $command | clip

# Hub VM Subnet
vm_hub_subnet_udr="$vm_hub_subnet_name"-udr
az network route-table create -n $vm_hub_subnet_udr -g $rg -l $location
az network route-table route create -n defaultRoute --route-table-name $vm_hub_subnet_udr -g $rg \
    --next-hop-type VirtualAppliance --address-prefix "0.0.0.0/0" --next-hop-ip-address $azfw_private_ip
az network route-table route create -n $aks_subnet_name --route-table-name $vm_hub_subnet_udr -g $rg \
    --next-hop-type VirtualAppliance --address-prefix $aks_subnet_prefix --next-hop-ip-address $azfw_private_ip
az network route-table route create -n $vm_spoke_subnet_name --route-table-name $vm_hub_subnet_udr -g $rg \
    --next-hop-type VirtualAppliance --address-prefix $vm_spoke_subnet_prefix --next-hop-ip-address $azfw_private_ip
az network route-table route create -n $acr_subnet_name --route-table-name $vm_hub_subnet_udr -g $rg \
    --next-hop-type VirtualAppliance --address-prefix $acr_subnet_prefix --next-hop-ip-address $azfw_private_ip           

vm_subnet_rt_id=$(az network route-table show -n $vm_hub_subnet_udr -g $rg -o tsv --query id)
az network vnet subnet update -g $rg --vnet-name $vnet_hub_name -n $vm_hub_subnet_name --route-table $vm_subnet_rt_id
command="az network vnet subnet update -g $rg --vnet-name $vnet_hub_name -n $vm_hub_subnet_name --route-table $vm_subnet_rt_id"
echo $command | clip

# Bug
#"GET /subscriptions/4b4ea128-f1cf-47ab-8468-4e9e2ece06e6/resourceGroups/bcbs/providers/Microsoft.Network/routeTables/C%3A%2FProgram%20Files%2FGit%2Fsubscriptions%2F4b4ea128-f1cf-47ab-8468-4e9e2ece06e6%2FresourceGroups%2Fbcbs%2Fproviders%2FMicrosoft.Network%2FrouteTables%2Fsubnet-aks-udr?api-version=2020-07-01 HTTP/1.1" 404 208
# az network vnet subnet update -g bcbs --vnet-name bcbs-spoke-vnet -n subnet-aks --route-table '/subscriptions/4b4ea128-f1cf-47ab-8468-4e9e2ece06e6/resourceGroups/bcbs/providers/Microsoft.Network/routeTables/subnet-aks-udr'

# Create cluster

#######################################################
########## Creating Azure Container Registry ##########
#######################################################
# Create ACR
acr_name=bcbsacr
az acr create -n $acr_name -g $rg --sku Premium
az network private-dns zone create -g $rg --name "privatelink.azurecr.io"
# Setup Private DNS for ACR Private Endpoint
az network private-dns link vnet create -g $rg --zone-name "privatelink.azurecr.io" \
    --name $vnet_spoke_name-"link" \
    --virtual-network $vnet_spoke_name \
    --registration-enabled false
az network private-dns link vnet create -g $rg --zone-name "privatelink.azurecr.io" \
    --name $vnet_hub_name-"link" \
    --virtual-network $vnet_hub_name \
    --registration-enabled false    
# Setup ACR Private Endpoint
acr_rt_id=$(az acr show --name $acr_name --query 'id' --output tsv)
acr_pe_name=ACR-PrivateEndpoint
az network private-endpoint create -g $rg \
    --name $acr_pe_name \
    --vnet-name $vnet_spoke_name \
    --subnet $acr_subnet_name \
    --private-connection-resource-id $acr_rt_id \
    --group-id registry \
    --connection-name ACR-connection
command="az network private-endpoint create -g $rg --vnet-name $vnet_spoke_name -n $acr_pe_name --subnet $acr_subnet_name --private-connection-resource-id $acr_rt_id --group-id registry --connection-name ACR-connection"
echo $command | clip
# Setup DNS entries for ACR Private Endpoint
acr_pe_nic_id=$(az network private-endpoint show \
  -n $acr_pe_name \
  -g $rg \
  --query 'networkInterfaces[0].id' \
  --output tsv)
  
acr_pe_ip=$(az resource show \
  --ids $acr_pe_nic_id \
  --api-version 2019-04-01 \
  --query 'properties.ipConfigurations[1].properties.privateIPAddress' \
  --output tsv)
command="az resource show --ids $acr_pe_nic_id --api-version 2019-04-01 --query 'properties.ipConfigurations[1].properties.privateIPAddress' --output tsv"
echo $command | clip
acr_pe_ip=10.13.2.5

data_pe_ip=$(az resource show \
  --ids $acr_pe_nic_id \
  --api-version 2019-04-01 \
  --query 'properties.ipConfigurations[0].properties.privateIPAddress' \
  --output tsv)
command="az resource show --ids $acr_pe_nic_id --api-version 2019-04-01 --query 'properties.ipConfigurations[0].properties.privateIPAddress' --output tsv"
echo $command | clip  
data_pe_ip=10.13.2.4

az network private-dns record-set a create \
  --name $acr_name \
  --zone-name privatelink.azurecr.io \
  -g $rg

az network private-dns record-set a add-record \
  -n $acr_name \
  --zone-name privatelink.azurecr.io \
  -g $rg \
  -a $acr_pe_ip

az network private-dns record-set a create \
  --name $acr_name.$location.data \
  --zone-name privatelink.azurecr.io \
  -g $rg

az network private-dns record-set a add-record \
  -n $acr_name.$location.data \
  --zone-name privatelink.azurecr.io \
  -g $rg \
  -a $data_pe_ip
# Setup Disable Public ACR Access
az acr update -n $acr_name --public-network-enabled false

#######################################################
########## Creating VMs for Troubleshooting ###########
#######################################################
vm_name=vm-hub
ssh_key_path=/c/users/vsantana/.ssh/ProxyAzurePublicKey.key
vm_user_name=victor
az vm create \
  -g $rg \
  -n $vm_name \
  --image UbuntuLTS \
  --admin-username $vm_user_name \
  --ssh-key-values $ssh_key_path \
  --vnet-name $vnet_hub_name \
  --subnet $vm_hub_subnet_name  \
  --size Standard_B2ms \
  --public-ip-address "" \
  --nsg ""

vm_name=vm-spoke
ssh_key_path=/c/users/vsantana/.ssh/ProxyAzurePublicKey.key
vm_user_name=victor
az vm create \
  -g $rg \
  -n $vm_name \
  --image UbuntuLTS \
  --admin-username $vm_user_name \
  --ssh-key-values $ssh_key_path \
  --vnet-name $vnet_spoke_name \
  --subnet $vm_spoke_subnet_name  \
  --size Standard_B2ms \
  --public-ip-address "" \
  --nsg ""

#######################################################
########## Creating Bastion Host for VM Access ########
#######################################################
az network public-ip create -g $rg -n bastion-PIP --sku Standard --location $location
az network bastion create --name bastion-hub --public-ip-address bastion-PIP -g $rg --vnet-name $vnet_hub_name --location $location

#######################################################
#################### Setup AKS Cluster ################
#######################################################
# Create AAD Service Principal with Password
az ad sp create-for-rbac --name VWSAKS-bcbs --skip-assignment
az ad sp credential reset --name VWSAKS-bcbs --password d28a395d-1235-4dee-875e-701f4aec6afa
## Command OutPut
# {
#   "appId": "c99659cc-420f-4ea0-8d3b-fc097e455123",   
#   "name": "VWSAKS-bcbs",
#   "password": "d28a395d-1235-4dee-875e-701f4aec6afa",
#   "tenant": "72f988bf-86f1-41af-91ab-2d7cd011db47"
# }

# Create Log Analytics Workspace for AKS
logws_name=loglabbcbs
#az monitor log-analytics workspace create -n $logws_name -g $rg
logws_id=$(az resource list -g $rg -n $logws_name --query '[].id' -o tsv)
# logws_customerid=$(az monitor log-analytics workspace show -n $logws_name -g $rg --query customerId -o tsv)

########################################################
# Deploy with Custom DNS
###################################################################
# AKS Managed Identity
# AKS Variables
aks_name=bcbs-aks
aks_service_cidr=172.16.0.0/16
aks_dns_service_ip=172.16.0.10
vm_size=Standard_B2ms
k8s_version=1.18.14
aks_dns_privatezone=/subscriptions/4b4ea128-f1cf-47ab-8468-4e9e2ece06e6/resourceGroups/lab/providers/Microsoft.Network/privateDnsZones/privatelink.westus2.azmk8s.io
aks_subnet_id=$(az network vnet subnet show -n $aks_subnet_name --vnet-name $vnet_spoke_name -g $rg --query id -o tsv)
aks_mi_identity=LabAKSIdentity
aad_grou_id=01370c29-49d6-41f0-8283-3d3d96cb9a15

# Create DNS Zone
az network private-dns zone create -g $rg -n "privatelink.$location.azmk8s.io"

az identity create --name $aks_mi_identity -g $rg
aks_mi_identity_id=$(az identity show -g $rg -n $aks_mi_identity --query id -o tsv)

aks_identity_clientId=$(az identity show -g $rg -n $aks_mi_identity --query clientId -o tsv)
aks_dns_id=$(az network private-dns zone show -g $rg -n "privatelink.$location.azmk8s.io" --query id -o tsv)
az role assignment create --assignee $aks_identity_clientId \
    --role "Private DNS Zone Contributor" \
    --scope $aks_dns_id
command="az role assignment create --assignee $aks_identity_clientId \
    --role \"Private DNS Zone Contributor\" \
    --scope $aks_dns_id"
echo $command | clip

hub_vnet_id=$(az network vnet show -g $rg -n $vnet_spoke_name --query id -o tsv)
az role assignment create --assignee $aks_identity_clientId \
    --role "Network Contributor" \
    --scope $hub_vnet_id
command="az role assignment create --assignee $aks_identity_clientId \
--role \"Network Contributor\" \
--scope $hub_vnet_id"
echo $command | clip

az extension add --name aks-preview
az aks create -g $rg -n $aks_name -l $location \
    --node-vm-size $vm_size \
    --kubernetes-version $k8s_version \
    --generate-ssh-keys \
    --node-count 2 \
    --network-plugin azure \
    --vnet-subnet-id $aks_subnet_id \
    --service-cidr $aks_service_cidr \
    --dns-service-ip $aks_dns_service_ip \
    --network-policy calico \
    --load-balancer-sku Standard \
    --enable-private-cluster \
    --outbound-type userDefinedRouting \
    --enable-addons azure-policy,monitoring \
    --workspace-resource-id $logws_id \
    --private-dns-zone $aks_dns_id \
    --enable-managed-identity \
    --assign-identity $aks_mi_identity_id \ 
    --enable-aad \
    --aad-admin-group-object-ids $aad_grou_id



command="az aks create -g $rg -n $aks_name -l $location \
    --node-vm-size $vm_size \
    --kubernetes-version $k8s_version \
    --generate-ssh-keys \
    --node-count 2 \
    --network-plugin azure \
    --vnet-subnet-id $aks_subnet_id \
    --service-cidr $aks_service_cidr \
    --dns-service-ip $aks_dns_service_ip \
    --network-policy calico \
    --load-balancer-sku Standard \
    --enable-private-cluster \
    --outbound-type userDefinedRouting \
    --enable-addons azure-policy,monitoring \
    --workspace-resource-id $logws_id \
    --private-dns-zone $aks_dns_id \
    --enable-managed-identity \
    --assign-identity $aks_mi_identity_id \
    --enable-aad \
    --aad-admin-group-object-ids $aad_grou_id"
echo $command | clip